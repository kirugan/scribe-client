<?php
namespace Kirugan\Scribe;

use Kirugan\Scribe\Autogenerated\LogEntry;
use Kirugan\Scribe\Autogenerated\scribeClient;
use Psr\Log\InvalidArgumentException;
use Psr\Log\LogLevel;

/**
 * todo make specification applicable
 */
class Logger extends \Psr\Log\AbstractLogger
{
    private $prefix;
    private $client;
    private $transport;

    public function __construct(string $host, int $port)
    {
        $socket = new \Thrift\Transport\TSocket($host, $port);
        $transport = new \Thrift\Transport\TFramedTransport($socket);
        $protocol = new \Thrift\Protocol\TBinaryProtocol($transport);

        $this->transport = $transport;
        $this->client = new scribeClient($protocol);
    }

    public function __destruct()
    {
        $this->transport->flush();
        $this->transport->close();
    }

    public function log($level, $message, array $context = [])
    {
        $this->assertLevel($level);

        if (!$this->transport->isOpen()) {
            $this->transport->open();
        }

        // todo if obj cast to string

        $category = $this->getCategory($level);
        $this->client->Log([
            new LogEntry(compact('category', 'message'))
        ]);
    }

    private function assertLevel($level)
    {
        if (in_array($level, [
            LogLevel::EMERGENCY,
            LogLevel::ALERT,
            LogLevel::CRITICAL,
            LogLevel::ERROR,
            LogLevel::WARNING,
            LogLevel::NOTICE,
            LogLevel::INFO,
            LogLevel::DEBUG,
        ])) {
            // todo do we need to check stringable interface on level ?
            throw new InvalidArgumentException(sprintf(
                'unsupported error level %s',
                $level
            ));
        }
    }

    public function setPrefix(string $prefix)
    {
        $this->prefix = $prefix;
    }

    protected function getCategory($level)
    {
        $prefix = '';
        if ($this->prefix) {
            $prefix = $this->prefix . '.';
        }

        return sprintf('%s%s', $prefix, $level);
    }
}